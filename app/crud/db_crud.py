from sqlalchemy.orm import Session
from sqlalchemy import text
from fastapi import HTTPException
from sqlalchemy.exc import IntegrityError
#from sqlalchemy import status
from loguru import logger
from app.crud.sql_operatrion import detect_sql_operation
from typing import Dict, Any
import logging


# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def crud_operation(db: Session, query: str) -> Dict[str, Any]:
    try:
        operation = detect_sql_operation(query)

        if operation == "unknown":
            return {"message": "Wrong SQL Generated by LLM"}

        if operation == "select":
            result = db.execute(text(query))
            columns = result.keys()
            rows = result.fetchall()

            data = [dict(zip(columns, row)) for row in rows]
            return {
                "data": data
            }


        elif operation in ["insert", "update"]:
            db.execute(text(query))
            db.commit()
            return {"message": "Database operation successfull"}

        elif operation in ["create", "drop", "alter", "truncate", "delete"]:
            return {"message": "Table of object is not permit"}

        else:
            return {"message": "Unsupported SQL operation or invalid syntax."}


    except IntegrityError as e:
        logger.warning("Duplicate entry detected")
        return {"success": False, "message": "The item already exists."}
    

    except Exception as e:
        logger.error(f"Database Operation Failed: {str(e)}")
        db.rollback()
        return {"success": False, "message": f"Something went wrong into sql operation with database. {str(e)}"}
